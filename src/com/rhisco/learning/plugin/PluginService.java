package com.rhisco.learning.plugin;import java.io.File;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import com.rhisco.tegra.bus.exception.TegraNotFoundException;import com.rhisco.tegra.bus.exception.TegraPluginException;import com.rhisco.tegra.bus.plugin.IPlugin;public class PluginService {	Map<String, IPlugin<?>> pluginCache = new HashMap<>();	//HashMap<String,IPlugin> map2= new HashMap<>();	public PluginService(String classpath, String pkg) {		//TegraSystemTools tst = new TegraSystemTools();				String absPath = classpath + pkg.replace('.', File.separatorChar);		System.out.println("Setting absolute search path to: '" + absPath + "'");		File dir = new File(absPath);				ClassLoader cl = new PluginClassLoader(dir, pkg);		if (dir.exists() && dir.isDirectory()) {			System.out.println("Valid filesystem directory, starting to search for plugins...");			String[] files = dir.list();			for (int i = 0; i < files.length; i++) {				System.out.println("Evaluating file: '" + files[i]+ "'");				try {					if (files[i].endsWith(".class")) {						System.out.println("it is a .class file");						Class<?> c = cl.loadClass(files[i].substring(0, files[i].indexOf(".")));						Object object = c.newInstance();						if (object instanceof IPlugin<?>){							System.out.println("Object is instance of IPlugin");							IPlugin<?> plugIn = (IPlugin<?>) object;							pluginCache.put(plugIn.getPluginName(), plugIn);							System.out.println("Plugin object added to pluginCache for a total of:" + pluginCache.size() + " Plug-Ins");						} else {							System.out.println("Object is NOT an instance of IPlugin");						}																		//map.put(pluginName, pluginName.getPluginName());						// Cesar, para que sirve un Map ???						// Invertí los elementos al map para hacer uso eficiente						// map.put(pluginName.getPluginName(), pluginName);					} 				} catch (Exception ex) {					throw new TegraPluginException(54260);				}			}		} else {			System.out.println("the directory does not exist or is not a directory");			throw new TegraNotFoundException(54260);		}	}	@SuppressWarnings({ "rawtypes" })	public void runValidation(String plugInName, List<Object> listOfParameters) {		if (pluginCache.containsKey(plugInName)){			pluginCache.get(plugInName).run(listOfParameters);		}		//		//pluginInstance.run(map.get(name), listOfParameters) ;		//Iterator<IPlugin> it = map.keySet().iterator();		//while (it.hasNext()) {		//	IPlugin<?> pluginInstance = it.next();		//	if (name.equals(map.get(pluginInstance))) {		//		System.out.println("The result is " + pluginInstance.run(listOfParameters));		//	}		//}	}	public void listPlugins() {		Iterator<String> it = pluginCache.keySet().iterator();		while (it.hasNext()) {			String plugInName = it.next();			System.out.println("Plugin is: " + plugInName + " params are: " + pluginCache.get(plugInName).getParamType());			//System.out.println("Plugin is: " + map.get(key) + " params are: " + key.getParamType());		}	}}