package com.rhisco.learning.plugin;import java.io.*;public class PluginClassLoader extends ClassLoader {	File directory;	String pkg;	public PluginClassLoader(File dir, String pkg) {		directory = dir;		this.pkg = pkg;		System.out.println("Setting classloader's directory to: '" + directory.getAbsolutePath() + "'");	}	public Class<?> loadClass(String name) throws ClassNotFoundException {		return loadClass(name, true);	}	public Class<?> loadClass(String classname, boolean resolve) throws ClassNotFoundException {		try {			Class<?> c = findLoadedClass(classname);			if (c == null) {				System.out.println("Class " + classname + " is not loaded yet");				try {					System.out.println("Attempting to find Class on System");					c = findSystemClass(classname);				} catch (Exception ex) {				}			}			if (c == null) {				System.out.println("Class " + classname + " not found on system, using Custom loadClass");				String filename = classname + ".class";				File f = new File(directory, filename);				System.out.println("Atempting to load class: " + f.getAbsolutePath());				int length = (int) f.length();				byte[] classbytes = new byte[length];				DataInputStream in = new DataInputStream(new FileInputStream(f));				in.readFully(classbytes);				in.close();				classname = (pkg.length() > 0) ? pkg + "." + classname : classname;				c = defineClass(classname, classbytes, 0, length);				if (resolve)					resolveClass(c);				System.out.println("Classname '" + classname + "' has been loaded");			}			return c;		}		catch (Exception ex) {			throw new ClassNotFoundException(ex.toString());		}	}}